name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  DOTNET_VERSION: '9.0.x'
  PROJECT_PATH: '.'

jobs:
  test:
    name: Test & Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Restore dependencies
      run: dotnet restore ${{ env.PROJECT_PATH }}
      
    - name: Build project
      run: dotnet build ${{ env.PROJECT_PATH }} --configuration Release --no-restore
      
    - name: Run tests (if any)
      run: dotnet test ${{ env.PROJECT_PATH }} --configuration Release --no-build --verbosity normal
      continue-on-error: true
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: ${{ env.PROJECT_PATH }}/bin/Release/
        retention-days: 7

  build-windows:
    name: Build for Windows
    runs-on: windows-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'release'
    
    strategy:
      matrix:
        runtime: [win-x64, win-x86]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore ${{ env.PROJECT_PATH }}
      
    - name: Publish application
      run: |
        dotnet publish ${{ env.PROJECT_PATH }} `
          --configuration Release `
          --runtime ${{ matrix.runtime }} `
          --self-contained true `
          --output ./publish/${{ matrix.runtime }} `
          -p:PublishSingleFile=true `
          -p:PublishTrimmed=true
          
    - name: Create release archive
      run: |
        $version = if ($env:GITHUB_REF -match 'refs/tags/(.*)') { $matches[1] } else { "dev-$($env:GITHUB_SHA.Substring(0,7))" }
        Compress-Archive -Path "./publish/${{ matrix.runtime }}/*" -DestinationPath "./Fail2Ban-$version-${{ matrix.runtime }}.zip"
        
    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: fail2ban-${{ matrix.runtime }}
        path: ./Fail2Ban-*-${{ matrix.runtime }}.zip
        retention-days: 30

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore ${{ env.PROJECT_PATH }}
      
    - name: Run security audit
      run: dotnet list ${{ env.PROJECT_PATH }} package --vulnerable --include-transitive
      continue-on-error: true
      
    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: csharp
        
    - name: Build for CodeQL
      run: dotnet build ${{ env.PROJECT_PATH }} --configuration Release
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, build-windows, security-scan]
    if: github.event_name == 'release'
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          fail2ban-win-x64/*.zip
          fail2ban-win-x86/*.zip
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 